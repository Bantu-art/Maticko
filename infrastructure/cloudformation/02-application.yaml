AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ma-Ticko Application Layer - ALB, ASG, EC2 Instances'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, test, prod]
    Description: Environment name
  
  GitHubBranch:
    Type: String
    Description: GitHub branch for this environment
  
  NetworkingStackName:
    Type: String
    Description: Name of the networking stack to import values from

Mappings:
  EnvironmentConfig:
    dev:
      InstanceType: t3.medium
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
    test:
      InstanceType: t3.small
      MinSize: 1
      MaxSize: 3
    prod:
      InstanceType: t3.medium
      MinSize: 2
      MaxSize: 6

Resources:
  # IAM Role for EC2 instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub 'ma-ticko-${Environment}-ec2-role'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'ma-ticko-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub '${NetworkingStackName}-PublicSubnet1-ID'
        - Fn::ImportValue: !Sub '${NetworkingStackName}-PublicSubnet2-ID'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${NetworkingStackName}-ALBSecurityGroup-ID'
      Tags:
        - Key: Name
          Value: !Sub 'ma-ticko-${Environment}-alb'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'ma-ticko-${Environment}-tg'
      Port: 8000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${NetworkingStackName}-VPC-ID'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200,301,302'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'ma-ticko-${Environment}-lt'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
        InstanceType: !FindInMap [EnvironmentConfig, !Ref Environment, InstanceType]
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 12
              VolumeType: gp3
              DeleteOnTermination: true
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${NetworkingStackName}-ApplicationSecurityGroup-ID'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            yum update -y
            yum install -y docker git
            
            # Start Docker service
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Clone repository
            cd /home/ec2-user
            git clone https://github.com/Bantu-art/Maticko.git
            cd Maticko
            git checkout ${GitHubBranch}
            
            # Build Docker image
            echo "Building Docker image..." >> /var/log/user-data.log
            docker build -t ma-ticko-app . >> /var/log/user-data.log 2>&1
            
            # Verify template file exists in image
            docker run --rm ma-ticko-app ls -la templates/ >> /var/log/user-data.log 2>&1
            
            # Run Docker container
            echo "Starting Docker container..." >> /var/log/user-data.log
            docker run -d --name ma-ticko-app -p 8000:8000 --restart unless-stopped ma-ticko-app
            
            echo "Docker setup complete" >> /var/log/user-data.log
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'ma-ticko-${Environment}-instance'
              - Key: Environment
                Value: !Ref Environment

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !FindInMap [EnvironmentConfig, !Ref Environment, MinSize]
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Sub 'ma-ticko-${Environment}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !FindInMap [EnvironmentConfig, !Ref Environment, MinSize]
      MaxSize: !FindInMap [EnvironmentConfig, !Ref Environment, MaxSize]
      DesiredCapacity: !FindInMap [EnvironmentConfig, !Ref Environment, DesiredCapacity]
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${NetworkingStackName}-PrivateSubnet1-ID'
        - Fn::ImportValue: !Sub '${NetworkingStackName}-PrivateSubnet2-ID'
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 900
      Tags:
        - Key: Name
          Value: !Sub 'ma-ticko-${Environment}-asg'
          PropagateAtLaunch: false

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerURL'
  
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'
