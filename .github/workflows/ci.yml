name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, test, dev ]
    types: [ closed ]

env:
  AWS_REGION: us-east-1

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dirt_stack/frontend/package-lock.json
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('dirt_stack/backend/requirements.txt') }}
    
    - name: Install Python dependencies
      run: |
        cd dirt_stack/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node dependencies
      run: |
        cd dirt_stack/frontend
        npm ci
    
    - name: Run Django migrations
      run: |
        cd dirt_stack/backend
        python manage.py migrate
    
    - name: Build frontend
      run: |
        cd dirt_stack/frontend
        npm run build
    
    - name: Setup Django template
      run: |
        cd dirt_stack/backend/templates
        cp app.template.html app.html
    
    - name: Update Django assets
      run: |
        cd dirt_stack
        python update_assets.py
    
    - name: Collect static files
      run: |
        cd dirt_stack/backend
        python manage.py collectstatic --noinput

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Determine environment
      id: env
      run: |
        if [ "${{ github.event.pull_request.base.ref }}" == "main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.pull_request.base.ref }}" == "test" ]; then
          echo "environment=test" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.pull_request.base.ref }}" == "dev" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Deploy to AWS
      run: |
        cd infrastructure
        chmod +x deploy-layered.sh
        ./deploy-layered.sh ${{ steps.env.outputs.environment }}
    
    - name: Update deployment status
      run: |
        echo "🚀 Deployed to ${{ steps.env.outputs.environment }} environment"
        echo "📍 Branch: ${{ github.ref_name }}"
        echo "🔗 Commit: ${{ github.sha }}"

  notify:
    needs: [test-and-build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful to ${{ steps.env.outputs.environment }}"
        else
          echo "❌ Deployment failed"
        fi